type token =
  | SEMICOLON
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | ARROW
  | ATTRIBUTE of (string)
  | PLUS
  | MINUS
  | MUL
  | DIV
  | MOD
  | CONCATENATE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LTQ
  | GT
  | GTQ
  | APOS
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | PRINT
  | INT
  | DOUBLE
  | STRING
  | BOOLEAN
  | ELEMENT
  | MOLECULE
  | EQUATION
  | FUNCTION
  | BALANCE
  | CALL
  | ACCESS
  | DRAW
  | NEWLINE
  | MASS
  | CHARGE
  | ELECTRONS
  | MOLAR_MASS
  | MOL_CHARGE
  | MOL_ELECTRON
  | BITAND
  | BITOR
  | AND
  | OR
  | NOT
  | TRUE
  | FALSE
  | OBJECT
  | DATATYPE of (string)
  | BOOLEAN_LITERAL of (bool)
  | ELEMENT_LITERAL of (string)
  | MOLECULE_LITERAL of (string)
  | STRING_LITERAL of (string)
  | ID of (string)
  | INTEGER_LITERAL of (int)
  | DOUBLE_LITERAL of (float)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
	 let parse_error s = (* Called by parser on error *)
		print_endline s;
		flush stdout
# 78 "parser.ml"
let yytransl_const = [|
  257 (* SEMICOLON *);
  258 (* COLON *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* COMMA *);
  266 (* ARROW *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* MUL *);
  271 (* DIV *);
  272 (* MOD *);
  273 (* CONCATENATE *);
  274 (* ASSIGN *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LTQ *);
  279 (* GT *);
  280 (* GTQ *);
  281 (* APOS *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* RETURN *);
  287 (* PRINT *);
  288 (* INT *);
  289 (* DOUBLE *);
  290 (* STRING *);
  291 (* BOOLEAN *);
  292 (* ELEMENT *);
  293 (* MOLECULE *);
  294 (* EQUATION *);
  295 (* FUNCTION *);
  296 (* BALANCE *);
  297 (* CALL *);
  298 (* ACCESS *);
  299 (* DRAW *);
  300 (* NEWLINE *);
  301 (* MASS *);
  302 (* CHARGE *);
  303 (* ELECTRONS *);
  304 (* MOLAR_MASS *);
  305 (* MOL_CHARGE *);
  306 (* MOL_ELECTRON *);
  307 (* BITAND *);
  308 (* BITOR *);
  309 (* AND *);
  310 (* OR *);
  311 (* NOT *);
  312 (* TRUE *);
  313 (* FALSE *);
  314 (* OBJECT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  267 (* ATTRIBUTE *);
  315 (* DATATYPE *);
  316 (* BOOLEAN_LITERAL *);
  317 (* ELEMENT_LITERAL *);
  318 (* MOLECULE_LITERAL *);
  319 (* STRING_LITERAL *);
  320 (* ID *);
  321 (* INTEGER_LITERAL *);
  322 (* DOUBLE_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\003\000\003\000\004\000\005\000\
\006\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\011\000\011\000\007\000\007\000\007\000\007\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\014\000\
\014\000\015\000\015\000\016\000\017\000\017\000\012\000\012\000\
\013\000\013\000\018\000\019\000\019\000\020\000\020\000\021\000\
\021\000\022\000\002\000\000\000"

let yylen = "\002\000\
\000\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\000\000\002\000\002\000\003\000\003\000\003\000\007\000\
\009\000\005\000\000\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\007\000\006\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\000\000\
\001\000\001\000\003\000\010\000\000\000\002\000\001\000\003\000\
\001\000\003\000\006\000\000\000\002\000\000\000\001\000\001\000\
\003\000\002\000\011\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\002\000\005\000\006\000\004\000\
\003\000\000\000\000\000\021\000\024\000\023\000\022\000\000\000\
\000\000\000\000\064\000\066\000\000\000\000\000\010\000\065\000\
\000\000\011\000\000\000\000\000\000\000\000\000\054\000\000\000\
\009\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\019\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\026\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\055\000\000\000\
\046\000\015\000\000\000\000\000\000\000\013\000\014\000\000\000\
\008\000\057\000\000\000\000\000\000\000\000\000\000\000\033\000\
\034\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\056\000\000\000\000\000\018\000\000\000\058\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\000\000\016\000\000\000\028\000\052\000\000\000\017\000"

let yydgoto = "\002\000\
\003\000\005\000\053\000\087\000\098\000\026\000\016\000\025\000\
\054\000\055\000\036\000\088\000\099\000\127\000\128\000\031\000\
\028\000\037\000\032\000\017\000\018\000\019\000"

let yysindex = "\002\000\
\000\000\000\000\236\254\010\255\000\000\000\000\000\000\000\000\
\000\000\022\255\075\255\000\000\000\000\000\000\000\000\010\255\
\025\255\036\255\000\000\000\000\051\255\075\255\000\000\000\000\
\075\255\000\000\255\254\040\255\087\255\029\255\000\000\068\255\
\000\000\109\255\055\255\092\255\000\000\054\255\128\255\173\255\
\000\000\000\000\132\255\138\255\159\255\173\255\173\255\010\255\
\157\255\010\255\000\000\000\000\127\255\000\000\007\000\170\255\
\119\255\066\001\108\255\173\255\173\255\173\255\031\000\055\000\
\178\255\126\255\192\255\173\255\000\000\173\255\173\255\173\255\
\173\255\173\255\173\255\173\255\173\255\173\255\173\255\173\255\
\173\255\193\255\173\255\173\255\115\255\000\000\000\000\006\255\
\000\000\000\000\080\001\079\000\123\001\000\000\000\000\119\255\
\000\000\000\000\002\255\173\255\180\001\064\255\064\255\000\000\
\000\000\000\000\193\001\037\001\037\001\177\255\177\255\177\255\
\177\255\000\000\242\001\229\001\196\255\205\255\119\255\156\255\
\173\255\156\255\106\255\126\255\126\255\180\001\203\255\199\255\
\144\255\000\000\000\000\183\255\103\000\000\000\119\255\000\000\
\142\255\000\000\173\255\208\255\156\255\173\255\058\255\000\000\
\180\001\214\255\000\000\137\001\000\000\000\000\156\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\216\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\219\255\000\000\000\000\000\000\000\000\000\000\
\000\000\220\255\000\000\000\000\000\000\000\000\000\000\000\000\
\021\255\000\000\000\000\063\255\000\000\000\000\000\000\137\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\221\255\004\255\127\000\151\000\000\000\
\000\000\000\000\143\255\015\001\021\001\175\000\199\000\223\000\
\247\000\000\000\000\255\022\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\255\000\000\222\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\254\255\108\000\104\000\000\000\204\000\000\000\
\211\255\216\255\189\000\176\255\106\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\210\000"

let yytablesize = 794
let yytable = "\058\000\
\042\000\010\000\001\000\042\000\045\000\063\000\064\000\045\000\
\042\000\118\000\124\000\125\000\045\000\020\000\119\000\123\000\
\042\000\050\000\004\000\091\000\092\000\093\000\050\000\053\000\
\011\000\053\000\053\000\101\000\021\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\042\000\115\000\116\000\022\000\065\000\053\000\067\000\
\053\000\053\000\053\000\053\000\042\000\042\000\143\000\023\000\
\053\000\053\000\053\000\126\000\053\000\053\000\029\000\149\000\
\051\000\060\000\119\000\060\000\060\000\051\000\006\000\007\000\
\008\000\009\000\132\000\030\000\134\000\072\000\073\000\074\000\
\133\000\053\000\053\000\053\000\053\000\053\000\053\000\033\000\
\060\000\034\000\060\000\060\000\060\000\060\000\040\000\147\000\
\041\000\042\000\145\000\060\000\060\000\148\000\060\000\060\000\
\035\000\152\000\012\000\013\000\014\000\015\000\040\000\038\000\
\041\000\090\000\119\000\135\000\039\000\043\000\056\000\044\000\
\045\000\046\000\047\000\060\000\060\000\060\000\060\000\060\000\
\060\000\048\000\057\000\049\000\050\000\043\000\060\000\044\000\
\045\000\046\000\047\000\019\000\061\000\019\000\019\000\044\000\
\068\000\048\000\044\000\049\000\050\000\144\000\124\000\044\000\
\006\000\007\000\008\000\009\000\051\000\052\000\040\000\044\000\
\041\000\062\000\019\000\066\000\019\000\019\000\019\000\019\000\
\006\000\007\000\008\000\009\000\051\000\052\000\019\000\040\000\
\019\000\019\000\085\000\086\000\117\000\043\000\096\000\044\000\
\045\000\046\000\047\000\097\000\070\000\071\000\072\000\073\000\
\074\000\048\000\100\000\049\000\050\000\019\000\019\000\019\000\
\019\000\019\000\019\000\114\000\129\000\130\000\138\000\139\000\
\140\000\141\000\048\000\146\000\049\000\050\000\150\000\068\000\
\006\000\007\000\008\000\009\000\051\000\052\000\062\000\063\000\
\048\000\049\000\131\000\136\000\027\000\059\000\137\000\024\000\
\000\000\006\000\007\000\008\000\009\000\051\000\052\000\027\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\027\000\
\000\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\027\000\027\000\027\000\027\000\027\000\027\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\027\000\076\000\077\000\078\000\079\000\080\000\081\000\094\000\
\000\000\000\000\000\000\027\000\027\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\082\000\076\000\077\000\078\000\079\000\080\000\081\000\095\000\
\000\000\000\000\000\000\083\000\084\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\082\000\076\000\077\000\078\000\079\000\080\000\081\000\121\000\
\000\000\000\000\000\000\083\000\084\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\082\000\076\000\077\000\078\000\079\000\080\000\081\000\142\000\
\000\000\000\000\000\000\083\000\084\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\082\000\076\000\077\000\078\000\079\000\080\000\081\000\031\000\
\000\000\000\000\031\000\083\000\084\000\000\000\000\000\031\000\
\000\000\000\000\031\000\031\000\000\000\000\000\000\000\031\000\
\082\000\031\000\031\000\031\000\031\000\031\000\031\000\032\000\
\000\000\000\000\032\000\083\000\084\000\000\000\000\000\032\000\
\000\000\000\000\032\000\032\000\000\000\000\000\000\000\032\000\
\031\000\032\000\032\000\032\000\032\000\032\000\032\000\038\000\
\000\000\000\000\038\000\031\000\031\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\032\000\038\000\038\000\038\000\038\000\038\000\038\000\040\000\
\000\000\000\000\040\000\032\000\032\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\038\000\040\000\040\000\040\000\040\000\040\000\040\000\039\000\
\000\000\000\000\039\000\038\000\038\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\039\000\039\000\039\000\039\000\039\000\039\000\041\000\
\000\000\000\000\041\000\040\000\040\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\039\000\041\000\041\000\041\000\041\000\041\000\041\000\036\000\
\000\000\000\000\036\000\039\000\039\000\037\000\043\000\036\000\
\037\000\043\000\000\000\000\000\000\000\037\000\043\000\036\000\
\041\000\036\000\036\000\000\000\000\000\037\000\043\000\037\000\
\037\000\000\000\000\000\041\000\041\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\074\000\000\000\000\000\000\000\
\036\000\078\000\079\000\080\000\081\000\000\000\037\000\043\000\
\000\000\000\000\000\000\036\000\036\000\089\000\000\000\000\000\
\000\000\037\000\037\000\043\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\120\000\076\000\077\000\078\000\079\000\
\080\000\081\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\000\000\076\000\077\000\078\000\079\000\080\000\081\000\
\000\000\000\000\000\000\082\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\083\000\084\000\
\000\000\082\000\000\000\000\000\000\000\000\000\122\000\000\000\
\000\000\000\000\000\000\000\000\083\000\084\000\070\000\071\000\
\072\000\073\000\074\000\075\000\151\000\076\000\077\000\078\000\
\079\000\080\000\081\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\082\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\084\000\000\000\082\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\084\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\084\000\082\000\000\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\074\000\083\000\084\000\076\000\
\077\000\078\000\079\000\080\000\081\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000"

let yycheck = "\040\000\
\001\001\004\000\001\000\004\001\001\001\046\000\047\000\004\001\
\009\001\004\001\009\001\010\001\009\001\016\000\009\001\096\000\
\017\001\004\001\039\001\060\000\061\000\062\000\009\001\003\001\
\003\001\005\001\006\001\068\000\004\001\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\042\001\083\000\084\000\009\001\048\000\026\001\050\000\
\028\001\029\001\030\001\031\001\053\001\054\001\135\000\005\001\
\036\001\037\001\038\001\100\000\040\001\041\001\064\001\006\001\
\004\001\003\001\009\001\005\001\006\001\009\001\061\001\062\001\
\063\001\064\001\120\000\036\001\122\000\014\001\015\001\016\001\
\121\000\061\001\062\001\063\001\064\001\065\001\066\001\001\001\
\026\001\061\001\028\001\029\001\030\001\031\001\003\001\141\000\
\005\001\006\001\139\000\037\001\038\001\142\000\040\001\041\001\
\037\001\151\000\032\001\033\001\034\001\035\001\003\001\003\001\
\005\001\006\001\009\001\010\001\062\001\026\001\065\001\028\001\
\029\001\030\001\031\001\061\001\062\001\063\001\064\001\065\001\
\066\001\038\001\003\001\040\001\041\001\026\001\003\001\028\001\
\029\001\030\001\031\001\003\001\003\001\005\001\006\001\001\001\
\018\001\038\001\004\001\040\001\041\001\008\001\009\001\009\001\
\061\001\062\001\063\001\064\001\065\001\066\001\003\001\017\001\
\005\001\003\001\026\001\007\001\028\001\029\001\030\001\031\001\
\061\001\062\001\063\001\064\001\065\001\066\001\038\001\003\001\
\040\001\041\001\009\001\061\001\066\001\026\001\005\001\028\001\
\029\001\030\001\031\001\062\001\012\001\013\001\014\001\015\001\
\016\001\038\001\003\001\040\001\041\001\061\001\062\001\063\001\
\064\001\065\001\066\001\011\001\009\001\001\001\004\001\009\001\
\065\001\027\001\038\001\004\001\040\001\041\001\001\001\000\000\
\061\001\062\001\063\001\064\001\065\001\066\001\004\001\004\001\
\004\001\004\001\119\000\124\000\025\000\041\000\125\000\022\000\
\255\255\061\001\062\001\063\001\064\001\065\001\066\001\001\001\
\255\255\255\255\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\255\255\255\255\009\001\
\255\255\255\255\012\001\013\001\255\255\255\255\255\255\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\255\255\255\255\009\001\
\255\255\255\255\012\001\013\001\255\255\255\255\255\255\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\042\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\004\001\053\001\054\001\001\001\001\001\009\001\
\004\001\004\001\255\255\255\255\255\255\009\001\009\001\017\001\
\042\001\019\001\020\001\255\255\255\255\017\001\017\001\019\001\
\020\001\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\042\001\021\001\022\001\023\001\024\001\255\255\042\001\042\001\
\255\255\255\255\255\255\053\001\054\001\004\001\255\255\255\255\
\255\255\053\001\054\001\054\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\004\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\255\255\042\001\255\255\255\255\255\255\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\012\001\013\001\
\014\001\015\001\016\001\017\001\004\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\255\255\042\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\042\001\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\053\001\054\001\019\001\
\020\001\021\001\022\001\023\001\024\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001"

let yynames_const = "\
  SEMICOLON\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  ARROW\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  MOD\000\
  CONCATENATE\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LTQ\000\
  GT\000\
  GTQ\000\
  APOS\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  PRINT\000\
  INT\000\
  DOUBLE\000\
  STRING\000\
  BOOLEAN\000\
  ELEMENT\000\
  MOLECULE\000\
  EQUATION\000\
  FUNCTION\000\
  BALANCE\000\
  CALL\000\
  ACCESS\000\
  DRAW\000\
  NEWLINE\000\
  MASS\000\
  CHARGE\000\
  ELECTRONS\000\
  MOLAR_MASS\000\
  MOL_CHARGE\000\
  MOL_ELECTRON\000\
  BITAND\000\
  BITOR\000\
  AND\000\
  OR\000\
  NOT\000\
  TRUE\000\
  FALSE\000\
  OBJECT\000\
  EOF\000\
  "

let yynames_block = "\
  ATTRIBUTE\000\
  DATATYPE\000\
  BOOLEAN_LITERAL\000\
  ELEMENT_LITERAL\000\
  MOLECULE_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  INTEGER_LITERAL\000\
  DOUBLE_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
        (	[] )
# 531 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 46 "parser.mly"
                ((_2 :: _1))
# 539 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
              ( _1 )
# 546 "parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 50 "parser.mly"
                    ( _1 )
# 553 "parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 51 "parser.mly"
                    ( _1 )
# 560 "parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                     ( _1 )
# 567 "parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                     ( Element ( _1 ) )
# 574 "parser.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                     ( Molecule ( _1 ) )
# 581 "parser.ml"
               : 'molecule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'datatypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 62 "parser.mly"
 ( {	
			vname = _2 ; 
			vtype = _1 ;
	} )
# 592 "parser.ml"
               : 'simple_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
        ( [] )
# 598 "parser.ml"
               : 'simple_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_declaration) in
    Obj.repr(
# 69 "parser.mly"
                                              (( _2 :: _1))
# 606 "parser.ml"
               : 'simple_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                   (Expr(_1))
# 613 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                           (Return(_2))
# 620 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                               (Print(_2))
# 627 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 75 "parser.mly"
                                (Block(List.rev _2))
# 634 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 76 "parser.mly"
                                                   (If(_3,_5,_7))
# 643 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 77 "parser.mly"
                                                                   (For(_3,_5,_7,_9))
# 653 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 78 "parser.mly"
                                      (While(_3,_5))
# 661 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
       ( [] )
# 667 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 82 "parser.mly"
                            ((_2 :: _1))
# 675 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
      ( IntType )
# 681 "parser.ml"
               : 'datatypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
           ( BooleanType )
# 687 "parser.ml"
               : 'datatypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
          ( StringType )
# 693 "parser.ml"
               : 'datatypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
          ( DoubleType )
# 699 "parser.ml"
               : 'datatypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
                   ( Int(_1) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 92 "parser.mly"
                   ( Double(_1))
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variables) in
    Obj.repr(
# 93 "parser.mly"
                 ( String(_1) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'variables) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'element_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'element_list) in
    Obj.repr(
# 94 "parser.mly"
                                                                   (Equation (_2, _4, _6) )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'molecule_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'molecule_list) in
    Obj.repr(
# 95 "parser.mly"
                                                                (Balance(_3,_5))
# 737 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                        ( Access(_1, _3) )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                    ( Binop(_1, Add, _3) )
# 753 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                   ( Binop(_1, Mul, _3) )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                   ( Binop(_1, Div, _3) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                   ( Binop(_1, Mod, _3) )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                  ( Boolean(_1, Eq, _3) )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                   ( Boolean(_1, Neq, _3) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                  ( Boolean(_1, Lt, _3) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                  ( Boolean(_1, Gt, _3) )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                   ( Boolean(_1, Ltq, _3) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                   ( Boolean(_1, Gtq, _3) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                   ( Brela(_1, And, _3) )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                  ( Brela(_1, Or, _3) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                           ( Concat(_1, _3) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variables) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                        (Asn(_1,_3))
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                          (Bracket(_2))
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'variables) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 113 "parser.mly"
                                           ( Call(_2, _4) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                     ( [] )
# 886 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 117 "parser.mly"
                     ( List.rev _1 )
# 893 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                             ( [_1] )
# 900 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                             ( _3 :: _1 )
# 908 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 125 "parser.mly"
 ({ 
		 name = _2 ;
	   electrons = _4 ; 
	   mass = _6 ; 
	   charge = _8;
	})
# 923 "parser.ml"
               : 'e_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
    ( [] )
# 929 "parser.ml"
               : 'e_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'e_declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e_declaration) in
    Obj.repr(
# 134 "parser.mly"
                                    ( List.rev(_2 :: _1) )
# 937 "parser.ml"
               : 'e_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'element) in
    Obj.repr(
# 137 "parser.mly"
             ( [_1] )
# 944 "parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'element_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'element) in
    Obj.repr(
# 138 "parser.mly"
                                ( (_3 :: _1) )
# 952 "parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'molecule) in
    Obj.repr(
# 141 "parser.mly"
              ( [_1] )
# 959 "parser.ml"
               : 'molecule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'molecule_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'molecule) in
    Obj.repr(
# 142 "parser.mly"
                                 ( (_3 :: _1) )
# 967 "parser.ml"
               : 'molecule_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'element_list) in
    Obj.repr(
# 146 "parser.mly"
 ({ 
		mname = _2 ; 
	  elements = _4; 
	})
# 978 "parser.ml"
               : 'm_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
        ( [] )
# 984 "parser.ml"
               : 'm_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'm_declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'm_declaration) in
    Obj.repr(
# 153 "parser.mly"
                                    ( List.rev (_2 ::_1) )
# 992 "parser.ml"
               : 'm_declaration_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
      ( [] )
# 998 "parser.ml"
               : 'argument_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument_list) in
    Obj.repr(
# 157 "parser.mly"
                 ( List.rev _1 )
# 1005 "parser.ml"
               : 'argument_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_declaration) in
    Obj.repr(
# 160 "parser.mly"
                        ( [_1 ])
# 1012 "parser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argument_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_declaration) in
    Obj.repr(
# 161 "parser.mly"
                                             ( _3 :: _1 )
# 1020 "parser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'datatypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variables) in
    Obj.repr(
# 165 "parser.mly"
 ( { 
		pname = _2 ;
 		ptype = _1 
	} )
# 1031 "parser.ml"
               : 'parameter_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : 'variables) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'argument_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'simple_declaration_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'e_declaration_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'm_declaration_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 172 "parser.mly"
 ( { 
		fname = _2;
		arguments = _4; 
		locals = List.rev _7;
		elements =  List.rev _8;
		molecules = List.rev _9;
		body = List.rev _10
	} )
# 1050 "parser.ml"
               : 'fdecl))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
